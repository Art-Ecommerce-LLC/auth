generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Role       { 
  USER 
  BASE 
  PLUS 
  ADMIN
  
}    
enum PlanStatus { 
  active 
  canceling 
  canceled 
  past_due 
  trialing
}
 
model User {
  id              String   @id @default(cuid()) @unique
  username        String   @unique
  password        String
  email           String   @unique
  emailVerified   Boolean  @default(false) @map("email_verified")
  image           String?
  updatedAt       DateTime @map("updated_at") @updatedAt
  createdAt       DateTime @map("created_at") @default(now())


  stripeCustomerId String? @map("stripe_customer_id") @unique
  stripeSubscriptionId  String? @map("stripe_subscription_id") @unique
  stripeScheduleId     String? @map("stripe_schedule_id") @unique
  role            Role       @default(USER)
  planStatus      PlanStatus @default(active)
  currentPeriodEnd     DateTime?
  
  googleToken     String?  @map("google_token")
  serviceToken    String  @map("service_token") @unique
  
  sessions Session[] 
  resetPasswords ResetPassword?
  emailVerifications EmailVerification?
  otps OTP?
  @@map("users")

}

model Session {
  id               String    @id @default(cuid()) @unique
  token            String    @map("token") @unique
  userId           String    @map("user_id")
  createdAt        DateTime  @map("created_at") @default(now())
  updatedAt        DateTime  @map("updated_at") @updatedAt
  expiresAt        DateTime  @map("expires_at")
  mfaVerified      Boolean   @default(false) @map("mfa_verified")
  ipAddress        String    @map("ip_address") 

  user             User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}
  

model OTP {
  id              String    @id @default(cuid()) @unique
  token           String    @map("token") @unique
  userId          String    @map("user_id") @unique
  otp             String    @unique
  expiresAt       DateTime  @map("expires_at")
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @updatedAt


  user         User  @relation(fields: [userId], references: [id])
  
  @@map("otps")
}


model ResetPassword {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  
  @@map("reset_passwords")
}

model EmailVerification {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}

model Permit {
  id                     String    @id @default(cuid())
  permitNumber           String    @unique @map("permit_number")
  address                String
  latitude               Float?
  longitude              Float?
  status                 String
  issueDate              DateTime  @map("issue_date")
  description            String
  rawHash                String    @map("raw_hash")
  urgency                String
  projectValue           String    @map("project_value")
  recommendedRoles       Json      @map("recommended_roles")
  guideJson              Json      @map("guide_json")
  hotness                Int
  alertSent              Boolean   @default(false) @map("alert_sent")
  reasoningSummary       String    @map("reasoning_summary")
  estimatedValuePerRole  Json      @map("estimated_value_per_role")
  leadPrice              Float     @map("lead_price")
  needsMorePermits       Boolean   @default(false) @map("needs_more_permits")
  nextSteps              String    @map("next_steps")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

}
