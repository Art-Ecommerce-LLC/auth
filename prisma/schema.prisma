generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Role       { 
  USER 
  BASE 
  PLUS 
  ADMIN
  
}    
enum PlanStatus { 
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}
 
model User {
  id              String   @id @default(cuid()) @unique
  username        String   @unique
  password        String
  email           String   @unique
  emailVerified   Boolean  @default(false) @map("email_verified")
  image           String?
  updatedAt       DateTime @map("updated_at") @updatedAt
  createdAt       DateTime @map("created_at") @default(now())


  stripeCustomerId String? @map("stripe_customer_id") @unique
  stripeSubscriptionId  String? @map("stripe_subscription_id") @unique
  stripeScheduleId     String? @map("stripe_schedule_id") @unique
  role            Role       @default(USER)
  planStatus      PlanStatus @default(active)
  currentPeriodEnd     DateTime?

  profession            String?
  
  googleToken     String?  @map("google_token")
  serviceToken    String  @map("service_token") @unique
  
  sessions Session[] 
  resetPasswords ResetPassword?
  emailVerifications EmailVerification?
  otps OTP?
  @@map("users")

}

model Session {
  id               String    @id @default(cuid()) @unique
  token            String    @map("token") @unique
  userId           String    @map("user_id")
  createdAt        DateTime  @map("created_at") @default(now())
  updatedAt        DateTime  @map("updated_at") @updatedAt
  expiresAt        DateTime  @map("expires_at")
  mfaVerified      Boolean   @default(false) @map("mfa_verified")
  ipAddress        String    @map("ip_address") 

  user             User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}
  

model OTP {
  id              String    @id @default(cuid()) @unique
  token           String    @map("token") @unique
  userId          String    @map("user_id") @unique
  otp             String    @unique
  expiresAt       DateTime  @map("expires_at")
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @updatedAt


  user         User  @relation(fields: [userId], references: [id])
  
  @@map("otps")
}


model ResetPassword {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  
  @@map("reset_passwords")
}

model EmailVerification {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}

model Permit {
  id                String   @id @default(cuid())
  permitNumber      String   @unique @map("permit_number")
  address           String
  latitude          Float
  longitude         Float
  status            String
  issueDate         DateTime @map("issue_date")
  description       String
  alertSent         Boolean  @default(false) @map("alert_sent")
  rawHash           String   @map("raw_hash")
  reasoningSummary  String   @map("reasoning_summary")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  professions       PermitProfession[]  
  @@map("permits")
}

model PermitProfession {
  id                     String   @id @default(cuid())
  permit                 Permit   @relation(fields: [permitId], references: [id])
  permitId               String   @map("permit_id")
  profession             String
  projectValueEstimate   Int?     @map("project_value_estimate")
  urgencyScore           Int       @map("urgency_score")
  leadValue              Int       @map("lead_value")
  reasoning               String
  nextSteps              String    @map("next_steps")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  @@unique([permitId, profession])
  @@map("permit_professions")
}


model Subscription {
  id             String   @id @default(cuid())
  email          String   @unique
  matchType      String   @map("match_type")
  matchValue     String   @map("match_value")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}