generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 
model User {
  id              String    @id @default(cuid()) @unique
  username        String?   @unique
  password        String?
  email           String?   @unique
  emailVerified   Boolean?  @default(false) @map("email_verified")
  image           String?
  ipAddress       String?   @map("ip_address") 
  updatedAt       DateTime? @map("updated_at") @updatedAt
  createdAt       DateTime? @map("created_at") @default(now())
  
  sessions Session[] // One-to-many relation to the Session model
  resetPasswords ResetPassword? // One-to-one relation to the ResetPassword model
  @@map("users")

}

model Session {
  sessionId        String   @map("session_id") @id @default(cuid()) @unique
  userId           String   @map("user_id")
  createdAt        DateTime @map("created_at") @default(now())
  updatedAt        DateTime @map("updated_at") @updatedAt
  expiresAt        DateTime @map("expires_at")
  mfaVerified      Boolean?  @default(false) @map("mfa_verified")

  user             User     @relation(fields: [userId], references: [id])
  otps             OTP[] 
  @@map("sessions")
}
 

model OTP {
  id              String    @id @default(cuid()) @unique
  sessionId       String    @map("session_id")
  otp             String    @unique
  expiresAt       DateTime  @map("expires_at")
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @updatedAt

  otpSession      Session   @relation(fields: [sessionId], references: [sessionId])
  @@map("otps")
}


model ResetPassword {
  id          String   @id @default(cuid()) @unique
  userId      String   @unique// Foreign key to User table
  token       String   @unique // Secure, hashed token
  expiresAt   DateTime  // Token expiry
  createdAt   DateTime @default(now())
  used        Boolean  @default(false) // Flag to indicate if the token was used

  user        User     @relation(fields: [userId], references: [id])
}