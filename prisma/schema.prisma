generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 
model User {
  id              String   @id @default(cuid()) @unique
  username        String   @unique
  password        String
  email           String   @unique
  emailVerified   Boolean  @default(false) @map("email_verified")
  image           String?
  updatedAt       DateTime @map("updated_at") @updatedAt
  createdAt       DateTime @map("created_at") @default(now())
  role            String   @default("USER")
  googleToken     String?  @map("google_token")
  serviceToken    String  @map("service_token") @unique
  
  sessions Session[] 
  resetPasswords ResetPassword?
  emailVerifications EmailVerification?
  otps OTP?
  renderDeploys RenderDeploys[]
  Event Event[]
  @@map("users")

}

model Session {
  id               String    @id @default(cuid()) @unique
  token            String    @map("token") @unique
  userId           String    @map("user_id")
  createdAt        DateTime  @map("created_at") @default(now())
  updatedAt        DateTime  @map("updated_at") @updatedAt
  expiresAt        DateTime  @map("expires_at")
  mfaVerified      Boolean   @default(false) @map("mfa_verified")
  ipAddress        String    @map("ip_address") 

  user             User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}
  

model OTP {
  id              String    @id @default(cuid()) @unique
  token           String    @map("token") @unique
  userId          String    @map("user_id") @unique
  otp             String    @unique
  expiresAt       DateTime  @map("expires_at")
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @updatedAt


  user         User  @relation(fields: [userId], references: [id])
  
  @@map("otps")
}


model ResetPassword {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  
  @@map("reset_passwords")
}

model EmailVerification {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  token       String   @unique
  expiresAt   DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}


model RenderDeploys {
  id          String   @id @default(cuid()) @unique
  userId      String   @map("user_id") @unique
  serviceId   String   @map("service_id") @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  @@map("render_deploys")
}

model Event {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  date          DateTime @unique
  isBooked      Boolean  @default(false) @map("is_booked")
  guestEmail    String?  @map("guest_email")
  googleEventId String?  @map("google_event_id") @unique
  serviceToken  String   @map("service_token")

  user        User     @relation(fields: [serviceToken], references: [serviceToken])

  @@map("events")
  
}

